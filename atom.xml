<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>天人合一</title>
  
  <subtitle>天人合一的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tanruidd.github.io/"/>
  <updated>2019-05-27T04:27:20.164Z</updated>
  <id>http://tanruidd.github.io/</id>
  
  <author>
    <name>TR</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows下Git的使用</title>
    <link href="http://tanruidd.github.io/2019/05/27/Windows%E4%B8%8BGit%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://tanruidd.github.io/2019/05/27/Windows下Git的使用/</id>
    <published>2019-05-27T02:33:59.000Z</published>
    <updated>2019-05-27T04:27:20.164Z</updated>
    
    <content type="html"><![CDATA[<p>首先自行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git help -a //查看git提供了哪些命令</span><br></pre></td></tr></table></figure><p><img src="/2019/05/27/Windows下Git的使用/1558924683503.png" alt="55892468350"></p><h3 id="仓库命令"><a href="#仓库命令" class="headerlink" title="仓库命令"></a>仓库命令</h3><p>首先在Git路径下Git Bash Here，因为使用cmd好像会出现有的命令识别不到。</p><p><img src="/2019/05/27/Windows下Git的使用/1558925857558.png" alt="55892585755"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show</span><br></pre></td></tr></table></figure><p><img src="/2019/05/27/Windows下Git的使用/1558926017790.png" alt="55892473654"></p><p>我们先使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir xxx</span><br></pre></td></tr></table></figure><p>创建一个目录，然后cd到该目录下，</p><p><img src="/2019/05/27/Windows下Git的使用/1558926125375.png" alt="55892612537"></p><p>然后可以使用ll命令查看该目录下的资源内容，</p><p><img src="/2019/05/27/Windows下Git的使用/1558926294733.png" alt="55892629473"></p><p>ll命令在cmd中就使用不了，所以我就用git bash了。</p><p>接着，使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>创建一个空的仓库，在当前目录中产生一个.git 的子目录。以后，所有的文件变化信息都会保存到这个目录下。</p><p><img src="/2019/05/27/Windows下Git的使用/1558926393756.png" alt="55892484987"></p><p><img src="/2019/05/27/Windows下Git的使用/1558926412243.png" alt="55892483261"></p><p>可以查看该目录结构</p><p><img src="/2019/05/27/Windows下Git的使用/1558926495973.png" alt="55892649597"></p><p>可以查看项目级别签名，</p><p><img src="/2019/05/27/Windows下Git的使用/1558926615267.png" alt="55892661526"></p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name xxxx</span><br><span class="line">git config user.email xxxx</span><br></pre></td></tr></table></figure><p>添加项目级别签名。</p><p><img src="/2019/05/27/Windows下Git的使用/1558926749741.png" alt="55892674974"></p><p>再次<code>cat .git/config</code>查看.git下面的config文件信息。</p><p><img src="/2019/05/27/Windows下Git的使用/1558926819989.png" alt="55892681998"></p><p>然后下面命令是创建系统级别签名的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config -global user.name xxxx</span><br><span class="line">git config -global user.email xxxx</span><br></pre></td></tr></table></figure><p>使用vim hello.txt添加一个hello.txt文件</p><p><img src="/2019/05/27/Windows下Git的使用/1558927158686.png" alt="55892715868"></p><p><img src="/2019/05/27/Windows下Git的使用/1558927207749.png" alt="55892720774"></p><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p>查看暂存区的文件状态，红色文字标记的文件表示工作区的文件待提交到暂存区，如下图所示：</p><p><img src="/2019/05/27/Windows下Git的使用/1558927285142.png" alt="55892728514"></p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add</span><br></pre></td></tr></table></figure><p>将工作区的文件提交到暂存区。</p><p><img src="/2019/05/27/Windows下Git的使用/1558927380413.png" alt="55892738041"></p><p>再次使用<code>git status</code>查看暂存区的文件状态，此时绿色标记的部分表示暂存区有个文件待提交到本地库。</p><p><img src="/2019/05/27/Windows下Git的使用/1558927437582.png" alt="55892743758"></p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;message&quot; hello.txt</span><br></pre></td></tr></table></figure><p>将暂存区的文件提交到本地库。</p><p><img src="/2019/05/27/Windows下Git的使用/1558929257418.png" alt="55892925741"></p><p>再次<code>git status</code>查看暂存区文件状态，此时暂存区没有要提交的信息</p><p><img src="/2019/05/27/Windows下Git的使用/1558929311778.png" alt="55892931177"></p><p>通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>查看本地库的历史记录。</p><p><img src="/2019/05/27/Windows下Git的使用/1558929381025.png" alt="55892938102"></p><p>常用命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">1) 远程仓库相关命令</span><br><span class="line"></span><br><span class="line">检出仓库：$ git clone git://github.com/jquery/jquery.git</span><br><span class="line"></span><br><span class="line">查看远程仓库：$ git remote -v</span><br><span class="line"></span><br><span class="line">添加远程仓库：$ git remote add [name] [url]</span><br><span class="line"></span><br><span class="line">删除远程仓库：$ git remote rm [name]</span><br><span class="line"></span><br><span class="line">修改远程仓库：$ git remote set-url --push [name] [newUrl]</span><br><span class="line"></span><br><span class="line">拉取远程仓库：$ git pull [remoteName] [localBranchName]</span><br><span class="line"></span><br><span class="line">推送远程仓库：$ git push [remoteName] [localBranchName]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">*如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：</span><br><span class="line"></span><br><span class="line">$git push origin test:master         // 提交本地test分支作为远程的master分支</span><br><span class="line"></span><br><span class="line">$git push origin test:test              // 提交本地test分支作为远程的test分支</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">2）分支(branch)操作相关命令</span><br><span class="line"></span><br><span class="line">查看本地分支：$ git branch</span><br><span class="line"></span><br><span class="line">查看远程分支：$ git branch -r</span><br><span class="line"></span><br><span class="line">创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支</span><br><span class="line"></span><br><span class="line">切换分支：$ git checkout [name]</span><br><span class="line"></span><br><span class="line">创建新分支并立即切换到新分支：$ git checkout -b [name]</span><br><span class="line"></span><br><span class="line">删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项</span><br><span class="line"></span><br><span class="line">合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并</span><br><span class="line"></span><br><span class="line">创建远程分支(本地分支push到远程)：$ git push origin [name]</span><br><span class="line"></span><br><span class="line">删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">*创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)</span><br><span class="line"></span><br><span class="line">$git symbolic-ref HEAD refs/heads/[name]</span><br><span class="line"></span><br><span class="line">$rm .git/index</span><br><span class="line"></span><br><span class="line">$git clean -fdx</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">3）版本(tag)操作相关命令</span><br><span class="line"></span><br><span class="line">查看版本：$ git tag</span><br><span class="line"></span><br><span class="line">创建版本：$ git tag [name]</span><br><span class="line"></span><br><span class="line">删除版本：$ git tag -d [name]</span><br><span class="line"></span><br><span class="line">查看远程版本：$ git tag -r</span><br><span class="line"></span><br><span class="line">创建远程版本(本地版本push到远程)：$ git push origin [name]</span><br><span class="line"></span><br><span class="line">删除远程版本：$ git push origin :refs/tags/[name]</span><br><span class="line"></span><br><span class="line">合并远程仓库的tag到本地：$ git pull origin --tags</span><br><span class="line"></span><br><span class="line">上传本地tag到远程仓库：$ git push origin --tags</span><br><span class="line"></span><br><span class="line">创建带注释的tag：$ git tag -a [name] -m &apos;yourMessage&apos;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">4) 子模块(submodule)相关操作命令</span><br><span class="line"></span><br><span class="line">添加子模块：$ git submodule add [url] [path]</span><br><span class="line"></span><br><span class="line">   如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs</span><br><span class="line"></span><br><span class="line">初始化子模块：$ git submodule init  ----只在首次检出仓库时运行一次就行</span><br><span class="line"></span><br><span class="line">更新子模块：$ git submodule update ----每次更新或切换分支后都需要运行一下</span><br><span class="line"></span><br><span class="line">删除子模块：（分4步走哦）</span><br><span class="line"></span><br><span class="line"> 1) $ git rm --cached [path]</span><br><span class="line"></span><br><span class="line"> 2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉</span><br><span class="line"></span><br><span class="line"> 3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉</span><br><span class="line"></span><br><span class="line"> 4) 手动删除子模块残留的目录</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">5）忽略一些文件、文件夹不提交</span><br><span class="line"></span><br><span class="line">在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如</span><br><span class="line"></span><br><span class="line">target</span><br><span class="line"></span><br><span class="line">bin</span><br><span class="line"></span><br><span class="line">*.db</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">Git 常用命令</span><br><span class="line"></span><br><span class="line">git branch 查看本地所有分支</span><br><span class="line">git status 查看当前状态 </span><br><span class="line">git commit 提交 </span><br><span class="line">git branch -a 查看所有的分支</span><br><span class="line">git branch -r 查看本地所有分支</span><br><span class="line">git commit -am &quot;init&quot; 提交并且加注释 </span><br><span class="line">git remote add origin git@192.168.1.119:ndshow</span><br><span class="line">git push origin master 将文件给推到服务器上 </span><br><span class="line">git remote show origin 显示远程库origin里的资源 </span><br><span class="line">git push origin master:develop</span><br><span class="line">git push origin master:hb-dev 将本地库与服务器上的库进行关联 </span><br><span class="line">git checkout --track origin/dev 切换到远程dev分支</span><br><span class="line">git branch -D master develop 删除本地库develop</span><br><span class="line">git checkout -b dev 建立一个新的本地分支dev</span><br><span class="line">git merge origin/dev 将分支dev与当前分支进行合并</span><br><span class="line">git checkout dev 切换到本地dev分支</span><br><span class="line">git remote show 查看远程库</span><br><span class="line">git add .</span><br><span class="line">git rm 文件名(包括路径) 从git中删除指定文件</span><br><span class="line">git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来</span><br><span class="line">git config --list 看所有用户</span><br><span class="line">git ls-files 看已经被提交的</span><br><span class="line">git rm [file name] 删除一个文件</span><br><span class="line">git commit -a 提交当前repos的所有的改变</span><br><span class="line">git add [file name] 添加一个文件到git index</span><br><span class="line">git commit -v 当你用－v参数的时候可以看commit的差异</span><br><span class="line">git commit -m &quot;This is the message describing the commit&quot; 添加commit信息</span><br><span class="line">git commit -a -a是代表add，把所有的change加到git index里然后再commit</span><br><span class="line">git commit -a -v 一般提交命令</span><br><span class="line">git log 看你commit的日志</span><br><span class="line">git diff 查看尚未暂存的更新</span><br><span class="line">git rm a.a 移除文件(从暂存区和工作区中删除)</span><br><span class="line">git rm --cached a.a 移除文件(只从暂存区中删除)</span><br><span class="line">git commit -m &quot;remove&quot; 移除文件(从Git中删除)</span><br><span class="line">git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)</span><br><span class="line">git diff --cached 或 $ git diff --staged 查看尚未提交的更新</span><br><span class="line">git stash push 将文件给push到一个临时空间中</span><br><span class="line">git stash pop 将文件从临时空间pop下来</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">git remote add origin git@github.com:username/Hello-World.git</span><br><span class="line">git push origin master 将本地项目给提交到服务器中</span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">git pull 本地与服务器端同步</span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line">git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。</span><br><span class="line">git push origin serverfix:awesomebranch</span><br><span class="line">------------------------------------------------------------------</span><br><span class="line">git fetch 相当于是从远程获取最新版本到本地，不会自动merge</span><br><span class="line">git commit -a -m &quot;log_message&quot; (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：</span><br><span class="line">git branch branch_0.1 master 从主分支master创建branch_0.1分支</span><br><span class="line">git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0</span><br><span class="line">git checkout branch_1.0/master 切换到branch_1.0/master分支</span><br><span class="line">du -hs</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------</span><br><span class="line">mkdir WebApp</span><br><span class="line">cd WebApp</span><br><span class="line">git init</span><br><span class="line">touch README</span><br><span class="line">git add README</span><br><span class="line">git commit -m &apos;first commit&apos;</span><br><span class="line">git remote add origin git@github.com:daixu/WebApp.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>另外可以贴一个图：</p><p><img src="/2019/05/27/Windows下Git的使用/2010072023345292.png" alt="img"></p><p>可以见<a href="https://www.cnblogs.com/lidabo/p/6845345.html" target="_blank" rel="noopener">原著</a></p><p>##windows下使用git和github建立远程仓库</p><p>我们要将上面的demo上传到github。</p><p>首先先建立远程仓库，此处的仓库名不一定需要和本地仓库名相同。</p><p><img src="/2019/05/27/Windows下Git的使用/1558930431353.png" alt="55893043135"></p><p>注意记住上面的ssh链接，最好不用http；</p><p>接着上git bash进行操作，操作之前先得进行密钥配对，我再搭博客时就已经配对完成了。</p><p>然后上传之前要对修改做一次总结。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;xxxxxxxxx&quot;</span><br></pre></td></tr></table></figure><p><img src="/2019/05/27/Windows下Git的使用/1558930806910.png" alt="55893080691"></p><p>然后需要将本地仓库和远程仓库建立连接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:wylhyz/learngit.git</span><br></pre></td></tr></table></figure><p>origin是远程仓库在本地别名，你可以自由取，git链接是在建立远程仓库时要你记下的ssh连接。此句就是在本地建立远程仓库别名并链接到远程仓库。</p><p><img src="/2019/05/27/Windows下Git的使用/1558930955486.png" alt="55893095548"></p><p>然后使用如下命令就可以将更改上传了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p><img src="/2019/05/27/Windows下Git的使用/1558931065207.png" alt="55893106520"></p><p>此时在github仓库上查看发现上传成功了</p><p><img src="/2019/05/27/Windows下Git的使用/1558931127611.png" alt="55893112761"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先自行安装。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Jsp+Struts2+Hibernate实现简单页面</title>
    <link href="http://tanruidd.github.io/2019/05/27/Jsp-Struts2-Hibernate%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E9%A1%B5%E9%9D%A2/"/>
    <id>http://tanruidd.github.io/2019/05/27/Jsp-Struts2-Hibernate实现简单页面/</id>
    <published>2019-05-27T02:20:35.000Z</published>
    <updated>2019-05-27T02:22:20.170Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>新主题来了</title>
    <link href="http://tanruidd.github.io/2019/05/26/%E6%96%B0%E4%B8%BB%E9%A2%98%E6%9D%A5%E4%BA%86/"/>
    <id>http://tanruidd.github.io/2019/05/26/新主题来了/</id>
    <published>2019-05-26T09:46:19.000Z</published>
    <updated>2019-05-26T09:55:05.526Z</updated>
    
    <content type="html"><![CDATA[<p>miho – This is summary</p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;miho – This is summary&lt;/p&gt;
    
    </summary>
    
    
      <category term="First" scheme="http://tanruidd.github.io/tags/First/"/>
    
      <category term="Second" scheme="http://tanruidd.github.io/tags/Second/"/>
    
  </entry>
  
  <entry>
    <title>草稿测试</title>
    <link href="http://tanruidd.github.io/2019/05/26/%E8%8D%89%E7%A8%BF%E6%B5%8B%E8%AF%95/"/>
    <id>http://tanruidd.github.io/2019/05/26/草稿测试/</id>
    <published>2019-05-26T07:55:23.000Z</published>
    <updated>2019-05-26T07:55:23.354Z</updated>
    
    <content type="html"><![CDATA[<p>这是草稿测试</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这是草稿测试&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo配置</title>
    <link href="http://tanruidd.github.io/2019/05/26/hexo%E9%85%8D%E7%BD%AE/"/>
    <id>http://tanruidd.github.io/2019/05/26/hexo配置/</id>
    <published>2019-05-26T07:17:09.000Z</published>
    <updated>2019-05-26T15:41:42.963Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: TR //网站标题</span><br><span class="line">subtitle: TR&apos;s Blog //网站副标题</span><br><span class="line">description: 学习永无止境 //网站描述</span><br><span class="line">keywords: //关键字,便于搜索引擎的搜索</span><br><span class="line">author: TR //您的名字</span><br><span class="line">language: zh-Hans //网站使用的语言</span><br><span class="line">timezone: //网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</span><br></pre></td></tr></table></figure><p>其中，<code>description</code>主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。<code>author</code>参数用于主题显示文章的作者。</p><h2 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url: http://tanruidd.github.io //你需要把url改成你的网站域名</span><br><span class="line"></span><br><span class="line">root: / //网站根目录</span><br><span class="line"></span><br><span class="line">permalink: :year/:month/:day/:title/ //文章的永久链接格式, 比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是http://yoursite.com/2018/09/05/temp。</span><br><span class="line"></span><br><span class="line">permalink_defaults: //永久链接中各部分的默认值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: landscape //theme就是选择什么主题，也就是在theme这个文件夹下，在官网上有很多个主题，默认给你安装的是lanscape这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在theme文件夹下，再修改这个参数就可以了。</span><br></pre></td></tr></table></figure><h2 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h2><p>接下来这个deploy就是网站的部署的，repo就是仓库(Repository)的简写。branch选择仓库的哪个分支。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/tanruidd/tanruidd.github.io</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><h2 id="layout-布局"><a href="#layout-布局" class="headerlink" title="layout(布局)"></a>layout(布局)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">post //路径source/_posts</span><br><span class="line">page //路径source</span><br><span class="line">draft //路径source/_drafts</span><br></pre></td></tr></table></figure><p>如果你想另起一页，那么可以使用page</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page board</span><br></pre></td></tr></table></figure><p>系统会自动给你在source文件夹下创建一个board文件夹，以及board文件夹中的index.md，这样你访问的board对应的链接就是<code>http://xxx.xxx/board</code></p><p><img src="/2019/05/26/hexo配置/1558856957188.png" alt="55885695718"></p><p>draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new draft mypage</span><br></pre></td></tr></table></figure><p>这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --draft</span><br></pre></td></tr></table></figure><p>在本地端口中开启服务预览。</p><p>如果你的草稿文件写完了，想要发表到post中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo publish draft newpage</span><br></pre></td></tr></table></figure><p>就会自动把newpage.md发送到post中。</p><h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>我找到了一个<a href="https://blog.minhow.com/2017/08/01/blog/installation-configuration/" target="_blank" rel="noopener">miho主题</a>，看着还不错。</p><p>基本上创建主题的人都会有教程的，跟着做就好了。</p><h2 id="设置评论系统"><a href="#设置评论系统" class="headerlink" title="设置评论系统"></a>设置评论系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gitment: </span><br><span class="line">  owner: tanruidd   #你的 GitHub ID</span><br><span class="line">  repo: &apos;tanruidd.github.io&apos;   #存储评论的 repo</span><br><span class="line">  client_id: &apos;&apos; #client ID</span><br><span class="line">  client_secret: &apos;&apos; #client secret</span><br></pre></td></tr></table></figure><p>我是通过github的gitmet设置的评论系统</p><p>需要先在setting中最后一个建立一个OAuth App</p><p><img src="/2019/05/26/hexo配置/1558879533328.png" alt="55887953332"></p><p><img src="/2019/05/26/hexo配置/1558879572285.png" alt="55887957228"></p><p>将生成的id和secret放入相应位置即可。</p><p>操作之后发现不行，，，不能在自己域名下使用，只能在tanruidd.github.io下评论。</p><p>所以我又找了一个方法，valine评论。</p><p>首先需要注册leancloud账户，然后创建一个应用。</p><p><img src="/2019/05/26/hexo配置/1558882319438.png" alt="55888231943"></p><p>同样这里存在密钥，只不过我这个主题没有自带，所以我需要自己配置。</p><p>首先在\miho\_config.yml下增加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: true</span><br><span class="line">  appid:   #your App ID</span><br><span class="line">  appkey:  #your App Key</span><br><span class="line">  notify: false # mail notifier , https://github.com/xCss/Valine/wiki</span><br><span class="line">  verify: false # Verification code</span><br><span class="line">  placeholder: 来啊，快活啊! </span><br><span class="line">  pageSize: 10</span><br></pre></td></tr></table></figure><p><img src="/2019/05/26/hexo配置/1558882467933.png" alt="55888246793"></p><p>对应位置填写。</p><p>然后找到\miho\layout\_partial\article.ejs文件，添加如下代码到最后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; %&gt;</span><br><span class="line">&lt;section id=<span class="string">"comments"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"comments"</span>&gt;</span><br><span class="line">  &lt;style&gt;</span><br><span class="line">    .comments&#123;margin:30px;padding:10px;background:#fff&#125;</span><br><span class="line">    @media screen and (max-width:800px)&#123;.comments&#123;margin:auto;padding:10px;background:#fff&#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">  &lt;%- partial('plugins/</span>comments/valine<span class="string">', &#123;</span></span><br><span class="line"><span class="string">    key: post.slug,</span></span><br><span class="line"><span class="string">    title: post.title,</span></span><br><span class="line"><span class="string">    url: config.url+url_for(post.path)</span></span><br><span class="line"><span class="string">    &#125;) %&gt;</span></span><br><span class="line"><span class="string">  &lt;/section&gt;</span></span><br><span class="line"><span class="string">&lt;% &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>在\miho\layout_partial\plugins\comments新建valine.ejs文件，输入下面内容。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"vcomment"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"comment"</span>&gt;&lt;/div&gt; </span><br><span class="line">&lt;script src=<span class="string">"//cdn1.lncld.net/static/js/3.0.4/av-min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"//unpkg.com/valine/dist/Valine.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">   <span class="keyword">var</span> notify = <span class="string">'&lt;%= theme.valine.notify %&gt;'</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">   <span class="keyword">var</span> verify = <span class="string">'&lt;%= theme.valine.verify %&gt;'</span> == <span class="literal">true</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Valine(&#123;</span><br><span class="line">            el: <span class="string">'.comment'</span>,</span><br><span class="line">            notify: notify,</span><br><span class="line">            verify: verify,</span><br><span class="line">            app_id: <span class="string">"&lt;%= theme.valine.appid %&gt;"</span>,</span><br><span class="line">            app_key: <span class="string">"&lt;%= theme.valine.appkey %&gt;"</span>,</span><br><span class="line">            placeholder: <span class="string">"&lt;%= theme.valine.placeholder %&gt;"</span>,</span><br><span class="line">            avatar:<span class="string">"&lt;%= theme.valine.avatar %&gt;"</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>然后生成部署一下就行了。</p><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。</span><br></pre></td></tr></table></figure><p>推广是很麻烦的事情，怎么样别人才能知道我们呢，首先需要让搜索引擎收录你的这个网站，别人才能搜索的到。那么这就需要SEO优化了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Site&quot;&gt;&lt;a href=&quot;#Site&quot; class=&quot;headerlink&quot; title=&quot;Site&quot;&gt;&lt;/a&gt;Site&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://tanruidd.github.io/2019/05/26/test/"/>
    <id>http://tanruidd.github.io/2019/05/26/test/</id>
    <published>2019-05-26T06:33:01.000Z</published>
    <updated>2019-05-26T06:49:18.371Z</updated>
    
    <content type="html"><![CDATA[<p>随便尝试一下</p><p><img src="/2019/05/26/test/1558852550683.png" alt="55885255068"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;随便尝试一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/05/26/test/1558852550683.png&quot; alt=&quot;55885255068&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo命令</title>
    <link href="http://tanruidd.github.io/2019/05/26/hexo%E5%91%BD%E4%BB%A4/"/>
    <id>http://tanruidd.github.io/2019/05/26/hexo命令/</id>
    <published>2019-05-26T06:18:18.000Z</published>
    <updated>2019-05-26T07:16:41.433Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官方文档</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/configuration&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo图片问题</title>
    <link href="http://tanruidd.github.io/2019/05/26/hexo%E5%9B%BE%E7%89%87%E9%97%AE%E9%A2%98/"/>
    <id>http://tanruidd.github.io/2019/05/26/hexo图片问题/</id>
    <published>2019-05-26T06:16:48.000Z</published>
    <updated>2019-05-26T07:02:20.170Z</updated>
    
    <content type="html"><![CDATA[<p>上传图片不能显示</p><p>修改_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p>Hexo 提供了一种更方便管理 Asset 的设定：<code>post_asset_folder</code></p><p>当您设置<code>post_asset_folder</code>为<code>true</code>参数后，在建立文件时，Hexo会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，您便可以更方便的使用资源。</p><p>在hexo的目录下执行<code>npm install hexo-asset-image --save</code> 下载一个插件。</p><p><code>hexo new &quot;xxx&quot;</code>新建一个测试文件</p><p>会发现_post文件夹下还有一个同名文件夹。</p><p>这是需要你的图片路径是</p><p><img src="/2019/05/26/hexo图片问题/1558854098058.png" alt="55885409805"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上传图片不能显示&lt;/p&gt;
&lt;p&gt;修改_config.yml&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一步步搭建博客</title>
    <link href="http://tanruidd.github.io/2019/05/26/github%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://tanruidd.github.io/2019/05/26/github搭建博客/</id>
    <published>2019-05-26T06:04:32.181Z</published>
    <updated>2019-05-26T07:06:17.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言和准备"><a href="#前言和准备" class="headerlink" title="前言和准备"></a>前言和准备</h2><p>好久之前搭建过一次博客，现在已经忘的差不多了，借此重新搭建一下，顺便回顾一下。</p><ul><li><p>首先我的github上面有我之前的博客项目，不过我想重新来一次，就先clone下来，然后删除该项目。</p><p><img src="/2019/05/26/github搭建博客/1558840289506.png" alt="55884028950"><img src="/2019/05/26/github搭建博客/1558840367084.png" alt="55884036708"></p><p>​</p></li><li><p>找到该项目的settings下的Delete this repository。</p></li></ul><p><img src="/2019/05/26/github搭建博客/1558841324720.png" alt="55884132472"></p><p><img src="/2019/05/26/github搭建博客/1558841387576.png" alt="55884138757"></p><ul><li>然后点击确认删除该项目</li></ul><p><img src="/2019/05/26/github搭建博客/1558840555470.png" alt="55884055547"></p><ul><li><p>需要先装两个软件 git和node.js</p><p><img src="/2019/05/26/github搭建博客/1558842485561.png" alt="55884248556"></p><p>这里注意git的安装</p><p><img src="/2019/05/26/github搭建博客/1558842855843.png" alt="55884285584"></p><p>这样就可以在cmd中操作了，附一个git的安装教程<a href="https://www.cnblogs.com/wj-1314/p/7993819.html" target="_blank" rel="noopener">链接</a>，再附一个node.js的安装教程<a href="https://blog.csdn.net/muzidigbig/article/details/80493880" target="_blank" rel="noopener">链接</a>。</p></li><li><p>装好之后可以在命令窗口（Win+R， 输入CMD，回车）检查一下，输入和结果如下图所示就安装完成了。</p><p><img src="/2019/05/26/github搭建博客/1558842700273.png" alt="55884270027"></p></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p>接着对git进行配置，创建ssh key。</p><p>在git中输入ssh-keygen -t rsa，接着按三次回车：</p><p><img src="/2019/05/26/github搭建博客/1558843950771.png" alt="55884395077"></p><p>就会在相应位置生成id_rsa和id_rsa.pub这两个文件，前者是密钥，后者是公钥，用记事本打开id_rsa.pub，复制其中的全部内容，添加到GitHub上，这样本地的id_rsa密钥就可以和GitHub上的id_rsa.pub公钥进行配对，授权成功。</p><p><img src="/2019/05/26/github搭建博客/1558844989545.png" alt="55884498954"></p><p><img src="/2019/05/26/github搭建博客/1558845068896.png" alt="55884506889"></p></li><li><p>SSH key添加之后，就可以在本机输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>进行测试</p><p><img src="/2019/05/26/github搭建博客/1558845306806.png" alt="55884530680"></p><p>可以输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>​</p><p><img src="/2019/05/26/github搭建博客/1558849240422.png" alt="55884924042"></p><p>如果不行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure><p>​</p></li></ul><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>任意新建一个文件夹，比如blog，然后cd到该路径下，或者直接在该文件夹下右键然后git Bash Here</p><p><img src="/2019/05/26/github搭建博客/1558845515189.png" alt="55884551518"></p><p>输入npm install -g hexo安装hexo，等待一段时间即可。</p><p>接着输入hexo -v检查是否安装成功。</p><p><img src="/2019/05/26/github搭建博客/1558846056259.png" alt="55884605625"></p><p>接着初始化hexo，输入hexo init</p><p><img src="/2019/05/26/github搭建博客/1558846240757.png" alt="55884624075"></p><p>再安装npm，输入npm -install</p><p><img src="/2019/05/26/github搭建博客/1558846652672.png" alt="55884665267"></p><p>我们的目录下就有下面的文件</p><p><img src="/2019/05/26/github搭建博客/1558847361557.png" alt="55884736155"></p><p><a href="https://blog.csdn.net/abc_12366/article/details/87864623" target="_blank" rel="noopener">每个目录及文件介绍</a></p><p>输入hexo s 打开hexo服务器，输入<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>我们可以看到如下页面：</p><p><img src="/2019/05/26/github搭建博客/1558847261797.png" alt="55884726179"></p><p>hexo g之后出现public文件夹</p><h2 id="github创建个人仓库"><a href="#github创建个人仓库" class="headerlink" title="github创建个人仓库"></a>github创建个人仓库</h2><p>创建一个和你用户名相同的仓库，后面加github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxx.github.io。</p><p><img src="/2019/05/26/github搭建博客/1558847856350.png" alt="55884785635"></p><p><img src="/2019/05/26/github搭建博客/1558848274662.png" alt="55884827466"></p><h2 id="将hexo部署到github"><a href="#将hexo部署到github" class="headerlink" title="将hexo部署到github"></a>将hexo部署到github</h2><p>打开站点配置文件 <code>_config.yml</code>，翻到最后，修改为</p><p><img src="/2019/05/26/github搭建博客/1558848404769.png" alt="55884840476"></p><p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p><p><img src="/2019/05/26/github搭建博客/1558848500026.png" alt="55884850002"></p><p>然后输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean //清除了你之前生成的东西</span><br><span class="line">hexo generate //生成静态文章，可以用 hexo g缩写</span><br><span class="line">hexo deploy //部署文章，可以用hexo d缩写</span><br></pre></td></tr></table></figure><p><img src="/2019/05/26/github搭建博客/1558848599198.png" alt="55884859919"></p><p><img src="/2019/05/26/github搭建博客/1558848630743.png" alt="55884863074"></p><p><img src="/2019/05/26/github搭建博客/1558848723151.png" alt="55884872315"></p><p>在输入hexo deploy时可能会需要登录，输入用户名和密码即可。</p><p><img src="/2019/05/26/github搭建博客/1558848687064.png" alt="55884868706"></p><p>然后就能在GitHub上看到自己的项目了，也可以在<a href="http://tanruidd.github.io看到博客了。" target="_blank" rel="noopener">http://tanruidd.github.io看到博客了。</a></p><p><img src="/2019/05/26/github搭建博客/1558848874311.png" alt="55884887431"></p><h2 id="设置个人域名"><a href="#设置个人域名" class="headerlink" title="设置个人域名"></a>设置个人域名</h2><p>注册一个阿里云账户，在阿里云买一个域名，我买的是.top结尾的，比较便宜。</p><p>选择域名</p><p><img src="/2019/05/26/github搭建博客/1558849399651.png" alt="55884939965"></p><p>点解析 解析设置 </p><p><img src="/2019/05/26/github搭建博客/1558849460093.png" alt="55884946009"></p><p>添加解析 ip改成github的ip，ip从cmd中ping一下就得到了 </p><p><img src="/2019/05/26/github搭建博客/1558849924612.png" alt="55884992461"></p><p><img src="/2019/05/26/github搭建博客/1558849902139.png" alt="55884990213"></p><p>登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名<code>tanruidd.top</code></p><p><img src="/2019/05/26/github搭建博客/1558849668348.png" alt="55884966834"></p><p>然后在你的博客文件source中创建一个名为CNAME文件，不要后缀，内容为你的域名。</p><p>最后在在git中输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>等待一段时间就可以在自己的域名看见博客了。</p><p><img src="/2019/05/26/github搭建博客/1558850304242.png" alt="55885030424"></p><p>然后就是对博客的配置了，比如修改主题，可以根据需求自行修改。</p><p>可以查找hexo命令。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言和准备&quot;&gt;&lt;a href=&quot;#前言和准备&quot; class=&quot;headerlink&quot; title=&quot;前言和准备&quot;&gt;&lt;/a&gt;前言和准备&lt;/h2&gt;&lt;p&gt;好久之前搭建过一次博客，现在已经忘的差不多了，借此重新搭建一下，顺便回顾一下。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;首先
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://tanruidd.github.io/2019/05/26/hello-world/"/>
    <id>http://tanruidd.github.io/2019/05/26/hello-world/</id>
    <published>2019-05-26T04:48:53.199Z</published>
    <updated>2019-05-26T04:48:53.199Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
