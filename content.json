{"meta":{"title":"天人合一","subtitle":"天人合一的博客","description":"学习永无止境","author":"TR","url":"http://tanruidd.github.io","root":"/"},"pages":[{"title":"about","date":"2019-05-26T07:59:29.000Z","updated":"2019-05-26T07:59:29.358Z","comments":true,"path":"about/index.html","permalink":"http://tanruidd.github.io/about/index.html","excerpt":"","text":""},{"title":"board","date":"2019-05-26T07:43:43.000Z","updated":"2019-05-26T07:46:56.254Z","comments":true,"path":"board/index.html","permalink":"http://tanruidd.github.io/board/index.html","excerpt":"","text":"哈哈"}],"posts":[{"title":"Windows下Git的使用","slug":"Windows下Git的使用","date":"2019-05-27T02:33:59.000Z","updated":"2019-05-27T04:27:20.164Z","comments":true,"path":"2019/05/27/Windows下Git的使用/","link":"","permalink":"http://tanruidd.github.io/2019/05/27/Windows下Git的使用/","excerpt":"","text":"首先自行安装。 1git help -a //查看git提供了哪些命令 仓库命令首先在Git路径下Git Bash Here，因为使用cmd好像会出现有的命令识别不到。 1git show 我们先使用 1mkdir xxx 创建一个目录，然后cd到该目录下， 然后可以使用ll命令查看该目录下的资源内容， ll命令在cmd中就使用不了，所以我就用git bash了。 接着，使用 1git init 创建一个空的仓库，在当前目录中产生一个.git 的子目录。以后，所有的文件变化信息都会保存到这个目录下。 可以查看该目录结构 可以查看项目级别签名， 通过 12git config user.name xxxxgit config user.email xxxx 添加项目级别签名。 再次cat .git/config查看.git下面的config文件信息。 然后下面命令是创建系统级别签名的 12git config -global user.name xxxxgit config -global user.email xxxx 使用vim hello.txt添加一个hello.txt文件 使用 1git status 查看暂存区的文件状态，红色文字标记的文件表示工作区的文件待提交到暂存区，如下图所示： 通过 1git add 将工作区的文件提交到暂存区。 再次使用git status查看暂存区的文件状态，此时绿色标记的部分表示暂存区有个文件待提交到本地库。 通过 1git commit -m &quot;message&quot; hello.txt 将暂存区的文件提交到本地库。 再次git status查看暂存区文件状态，此时暂存区没有要提交的信息 通过 1git log 查看本地库的历史记录。 常用命令 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111) 远程仓库相关命令检出仓库：$ git clone git://github.com/jquery/jquery.git查看远程仓库：$ git remote -v添加远程仓库：$ git remote add [name] [url]删除远程仓库：$ git remote rm [name]修改远程仓库：$ git remote set-url --push [name] [newUrl]拉取远程仓库：$ git pull [remoteName] [localBranchName]推送远程仓库：$ git push [remoteName] [localBranchName] *如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：$git push origin test:master // 提交本地test分支作为远程的master分支$git push origin test:test // 提交本地test分支作为远程的test分支 2）分支(branch)操作相关命令查看本地分支：$ git branch查看远程分支：$ git branch -r创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支切换分支：$ git checkout [name]创建新分支并立即切换到新分支：$ git checkout -b [name]删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并创建远程分支(本地分支push到远程)：$ git push origin [name]删除远程分支：$ git push origin :heads/[name] 或 $ gitpush origin :[name] *创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)$git symbolic-ref HEAD refs/heads/[name]$rm .git/index$git clean -fdx 3）版本(tag)操作相关命令查看版本：$ git tag创建版本：$ git tag [name]删除版本：$ git tag -d [name]查看远程版本：$ git tag -r创建远程版本(本地版本push到远程)：$ git push origin [name]删除远程版本：$ git push origin :refs/tags/[name]合并远程仓库的tag到本地：$ git pull origin --tags上传本地tag到远程仓库：$ git push origin --tags创建带注释的tag：$ git tag -a [name] -m &apos;yourMessage&apos; 4) 子模块(submodule)相关操作命令添加子模块：$ git submodule add [url] [path] 如：$git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs初始化子模块：$ git submodule init ----只在首次检出仓库时运行一次就行更新子模块：$ git submodule update ----每次更新或切换分支后都需要运行一下删除子模块：（分4步走哦） 1) $ git rm --cached [path] 2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉 3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉 4) 手动删除子模块残留的目录 5）忽略一些文件、文件夹不提交在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如targetbin*.db 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465Git 常用命令git branch 查看本地所有分支git status 查看当前状态 git commit 提交 git branch -a 查看所有的分支git branch -r 查看本地所有分支git commit -am &quot;init&quot; 提交并且加注释 git remote add origin git@192.168.1.119:ndshowgit push origin master 将文件给推到服务器上 git remote show origin 显示远程库origin里的资源 git push origin master:developgit push origin master:hb-dev 将本地库与服务器上的库进行关联 git checkout --track origin/dev 切换到远程dev分支git branch -D master develop 删除本地库developgit checkout -b dev 建立一个新的本地分支devgit merge origin/dev 将分支dev与当前分支进行合并git checkout dev 切换到本地dev分支git remote show 查看远程库git add .git rm 文件名(包括路径) 从git中删除指定文件git clone git://github.com/schacon/grit.git 从服务器上将代码给拉下来git config --list 看所有用户git ls-files 看已经被提交的git rm [file name] 删除一个文件git commit -a 提交当前repos的所有的改变git add [file name] 添加一个文件到git indexgit commit -v 当你用－v参数的时候可以看commit的差异git commit -m &quot;This is the message describing the commit&quot; 添加commit信息git commit -a -a是代表add，把所有的change加到git index里然后再commitgit commit -a -v 一般提交命令git log 看你commit的日志git diff 查看尚未暂存的更新git rm a.a 移除文件(从暂存区和工作区中删除)git rm --cached a.a 移除文件(只从暂存区中删除)git commit -m &quot;remove&quot; 移除文件(从Git中删除)git rm -f a.a 强行移除修改后文件(从暂存区和工作区中删除)git diff --cached 或 $ git diff --staged 查看尚未提交的更新git stash push 将文件给push到一个临时空间中git stash pop 将文件从临时空间pop下来---------------------------------------------------------git remote add origin git@github.com:username/Hello-World.gitgit push origin master 将本地项目给提交到服务器中-----------------------------------------------------------git pull 本地与服务器端同步-----------------------------------------------------------------git push (远程仓库名) (分支名) 将本地分支推送到服务器上去。git push origin serverfix:awesomebranch------------------------------------------------------------------git fetch 相当于是从远程获取最新版本到本地，不会自动mergegit commit -a -m &quot;log_message&quot; (-a是提交所有改动，-m是加入log信息) 本地修改同步至服务器端 ：git branch branch_0.1 master 从主分支master创建branch_0.1分支git branch -m branch_0.1 branch_1.0 将branch_0.1重命名为branch_1.0git checkout branch_1.0/master 切换到branch_1.0/master分支du -hs-----------------------------------------------------------mkdir WebAppcd WebAppgit inittouch READMEgit add READMEgit commit -m &apos;first commit&apos;git remote add origin git@github.com:daixu/WebApp.gitgit push -u origin master 另外可以贴一个图： 可以见原著 ##windows下使用git和github建立远程仓库 我们要将上面的demo上传到github。 首先先建立远程仓库，此处的仓库名不一定需要和本地仓库名相同。 注意记住上面的ssh链接，最好不用http； 接着上git bash进行操作，操作之前先得进行密钥配对，我再搭博客时就已经配对完成了。 然后上传之前要对修改做一次总结。 1git commit -m &quot;xxxxxxxxx&quot; 然后需要将本地仓库和远程仓库建立连接： 1git remote add origin git@github.com:wylhyz/learngit.git origin是远程仓库在本地别名，你可以自由取，git链接是在建立远程仓库时要你记下的ssh连接。此句就是在本地建立远程仓库别名并链接到远程仓库。 然后使用如下命令就可以将更改上传了。 1git push -u origin master 此时在github仓库上查看发现上传成功了","categories":[],"tags":[]},{"title":"Jsp+Struts2+Hibernate实现简单页面","slug":"Jsp-Struts2-Hibernate实现简单页面","date":"2019-05-27T02:20:35.000Z","updated":"2019-05-27T02:22:20.170Z","comments":true,"path":"2019/05/27/Jsp-Struts2-Hibernate实现简单页面/","link":"","permalink":"http://tanruidd.github.io/2019/05/27/Jsp-Struts2-Hibernate实现简单页面/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"新主题来了","slug":"新主题来了","date":"2019-05-26T09:46:19.000Z","updated":"2019-05-26T09:55:05.526Z","comments":true,"path":"2019/05/26/新主题来了/","link":"","permalink":"http://tanruidd.github.io/2019/05/26/新主题来了/","excerpt":"miho – This is summary","text":"miho – This is summary","categories":[],"tags":[{"name":"First","slug":"First","permalink":"http://tanruidd.github.io/tags/First/"},{"name":"Second","slug":"Second","permalink":"http://tanruidd.github.io/tags/Second/"}]},{"title":"草稿测试","slug":"草稿测试","date":"2019-05-26T07:55:23.000Z","updated":"2019-05-26T07:55:23.354Z","comments":true,"path":"2019/05/26/草稿测试/","link":"","permalink":"http://tanruidd.github.io/2019/05/26/草稿测试/","excerpt":"","text":"这是草稿测试","categories":[],"tags":[]},{"title":"hexo配置","slug":"hexo配置","date":"2019-05-26T07:17:09.000Z","updated":"2019-05-26T15:41:42.963Z","comments":true,"path":"2019/05/26/hexo配置/","link":"","permalink":"http://tanruidd.github.io/2019/05/26/hexo配置/","excerpt":"","text":"Site1234567title: TR //网站标题subtitle: TR&apos;s Blog //网站副标题description: 学习永无止境 //网站描述keywords: //关键字,便于搜索引擎的搜索author: TR //您的名字language: zh-Hans //网站使用的语言timezone: //网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。 其中，description主要用于SEO，告诉搜索引擎一个关于您站点的简单描述，通常建议在其中包含您网站的关键词。author参数用于主题显示文章的作者。 URL1234567url: http://tanruidd.github.io //你需要把url改成你的网站域名root: / //网站根目录permalink: :year/:month/:day/:title/ //文章的永久链接格式, 比如我新建一个文章叫temp.md，那么这个时候他自动生成的地址就是http://yoursite.com/2018/09/05/temp。permalink_defaults: //永久链接中各部分的默认值 1theme: landscape //theme就是选择什么主题，也就是在theme这个文件夹下，在官网上有很多个主题，默认给你安装的是lanscape这个主题。当你需要更换主题时，在官网上下载，把主题的文件放在theme文件夹下，再修改这个参数就可以了。 Deployment接下来这个deploy就是网站的部署的，repo就是仓库(Repository)的简写。branch选择仓库的哪个分支。 1234deploy: type: git repo: https://github.com/tanruidd/tanruidd.github.io branch: master layout(布局)123post //路径source/_postspage //路径sourcedraft //路径source/_drafts 如果你想另起一页，那么可以使用page 1hexo new page board 系统会自动给你在source文件夹下创建一个board文件夹，以及board文件夹中的index.md，这样你访问的board对应的链接就是http://xxx.xxx/board draft是草稿的意思，也就是你如果想写文章，又不希望被看到，那么可以 1hexo new draft mypage 这样会在source/_draft中新建一个newpage.md文件，如果你的草稿文件写的过程中，想要预览一下，那么可以使用 1hexo server --draft 在本地端口中开启服务预览。 如果你的草稿文件写完了，想要发表到post中 1hexo publish draft newpage 就会自动把newpage.md发送到post中。 更改主题我找到了一个miho主题，看着还不错。 基本上创建主题的人都会有教程的，跟着做就好了。 设置评论系统12345gitment: owner: tanruidd #你的 GitHub ID repo: &apos;tanruidd.github.io&apos; #存储评论的 repo client_id: &apos;&apos; #client ID client_secret: &apos;&apos; #client secret 我是通过github的gitmet设置的评论系统 需要先在setting中最后一个建立一个OAuth App 将生成的id和secret放入相应位置即可。 操作之后发现不行，，，不能在自己域名下使用，只能在tanruidd.github.io下评论。 所以我又找了一个方法，valine评论。 首先需要注册leancloud账户，然后创建一个应用。 同样这里存在密钥，只不过我这个主题没有自带，所以我需要自己配置。 首先在\\miho\\_config.yml下增加 12345678valine: enable: true appid: #your App ID appkey: #your App Key notify: false # mail notifier , https://github.com/xCss/Valine/wiki verify: false # Verification code placeholder: 来啊，快活啊! pageSize: 10 对应位置填写。 然后找到\\miho\\layout\\_partial\\article.ejs文件，添加如下代码到最后 12345678910111213&lt;% if (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; %&gt;&lt;section id=\"comments\" class=\"comments\"&gt; &lt;style&gt; .comments&#123;margin:30px;padding:10px;background:#fff&#125; @media screen and (max-width:800px)&#123;.comments&#123;margin:auto;padding:10px;background:#fff&#125;&#125; &lt;/style&gt; &lt;%- partial('plugins/comments/valine', &#123; key: post.slug, title: post.title, url: config.url+url_for(post.path) &#125;) %&gt; &lt;/section&gt;&lt;% &#125; %&gt; 在\\miho\\layout_partial\\plugins\\comments新建valine.ejs文件，输入下面内容。 123456789101112131415161718&lt;div id=\"vcomment\" class=\"comment\"&gt;&lt;/div&gt; &lt;script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"&gt;&lt;/script&gt;&lt;script src=\"//unpkg.com/valine/dist/Valine.min.js\"&gt;&lt;/script&gt;&lt;script&gt; var notify = '&lt;%= theme.valine.notify %&gt;' == true ? true : false; var verify = '&lt;%= theme.valine.verify %&gt;' == true ? true : false; window.onload = function() &#123; new Valine(&#123; el: '.comment', notify: notify, verify: verify, app_id: \"&lt;%= theme.valine.appid %&gt;\", app_key: \"&lt;%= theme.valine.appkey %&gt;\", placeholder: \"&lt;%= theme.valine.placeholder %&gt;\", avatar:\"&lt;%= theme.valine.avatar %&gt;\" &#125;); &#125;&lt;/script&gt; 然后生成部署一下就行了。 SEO优化1SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”。SEO是指通过站内优化比如网站结构调整、网站内容建设、网站代码优化等以及站外优化。 推广是很麻烦的事情，怎么样别人才能知道我们呢，首先需要让搜索引擎收录你的这个网站，别人才能搜索的到。那么这就需要SEO优化了。","categories":[],"tags":[]},{"title":"test","slug":"test","date":"2019-05-26T06:33:01.000Z","updated":"2019-05-26T06:49:18.371Z","comments":true,"path":"2019/05/26/test/","link":"","permalink":"http://tanruidd.github.io/2019/05/26/test/","excerpt":"","text":"随便尝试一下","categories":[],"tags":[]},{"title":"hexo命令","slug":"hexo命令","date":"2019-05-26T06:18:18.000Z","updated":"2019-05-26T07:16:41.433Z","comments":true,"path":"2019/05/26/hexo命令/","link":"","permalink":"http://tanruidd.github.io/2019/05/26/hexo命令/","excerpt":"","text":"官方文档","categories":[],"tags":[]},{"title":"hexo图片问题","slug":"hexo图片问题","date":"2019-05-26T06:16:48.000Z","updated":"2019-05-26T07:02:20.170Z","comments":true,"path":"2019/05/26/hexo图片问题/","link":"","permalink":"http://tanruidd.github.io/2019/05/26/hexo图片问题/","excerpt":"","text":"上传图片不能显示 修改_config.yml 1post_asset_folder: true Hexo 提供了一种更方便管理 Asset 的设定：post_asset_folder 当您设置post_asset_folder为true参数后，在建立文件时，Hexo会自动建立一个与文章同名的文件夹，您可以把与该文章相关的所有资源都放到那个文件夹，如此一来，您便可以更方便的使用资源。 在hexo的目录下执行npm install hexo-asset-image --save 下载一个插件。 hexo new &quot;xxx&quot;新建一个测试文件 会发现_post文件夹下还有一个同名文件夹。 这是需要你的图片路径是","categories":[],"tags":[]},{"title":"一步步搭建博客","slug":"github搭建博客","date":"2019-05-26T06:04:32.181Z","updated":"2019-05-26T07:06:17.057Z","comments":true,"path":"2019/05/26/github搭建博客/","link":"","permalink":"http://tanruidd.github.io/2019/05/26/github搭建博客/","excerpt":"","text":"前言和准备好久之前搭建过一次博客，现在已经忘的差不多了，借此重新搭建一下，顺便回顾一下。 首先我的github上面有我之前的博客项目，不过我想重新来一次，就先clone下来，然后删除该项目。 ​ 找到该项目的settings下的Delete this repository。 然后点击确认删除该项目 需要先装两个软件 git和node.js 这里注意git的安装 这样就可以在cmd中操作了，附一个git的安装教程链接，再附一个node.js的安装教程链接。 装好之后可以在命令窗口（Win+R， 输入CMD，回车）检查一下，输入和结果如下图所示就安装完成了。 配置 接着对git进行配置，创建ssh key。 在git中输入ssh-keygen -t rsa，接着按三次回车： 就会在相应位置生成id_rsa和id_rsa.pub这两个文件，前者是密钥，后者是公钥，用记事本打开id_rsa.pub，复制其中的全部内容，添加到GitHub上，这样本地的id_rsa密钥就可以和GitHub上的id_rsa.pub公钥进行配对，授权成功。 SSH key添加之后，就可以在本机输入ssh -T git@github.com进行测试 可以输入 12git config user.namegit config user.email ​ 如果不行 12git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot; ​ 安装hexo任意新建一个文件夹，比如blog，然后cd到该路径下，或者直接在该文件夹下右键然后git Bash Here 输入npm install -g hexo安装hexo，等待一段时间即可。 接着输入hexo -v检查是否安装成功。 接着初始化hexo，输入hexo init 再安装npm，输入npm -install 我们的目录下就有下面的文件 每个目录及文件介绍 输入hexo s 打开hexo服务器，输入http://localhost:4000/我们可以看到如下页面： hexo g之后出现public文件夹 github创建个人仓库创建一个和你用户名相同的仓库，后面加github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxx.github.io。 将hexo部署到github打开站点配置文件 _config.yml，翻到最后，修改为 这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。 然后输入 123hexo clean //清除了你之前生成的东西hexo generate //生成静态文章，可以用 hexo g缩写hexo deploy //部署文章，可以用hexo d缩写 在输入hexo deploy时可能会需要登录，输入用户名和密码即可。 然后就能在GitHub上看到自己的项目了，也可以在http://tanruidd.github.io看到博客了。 设置个人域名注册一个阿里云账户，在阿里云买一个域名，我买的是.top结尾的，比较便宜。 选择域名 点解析 解析设置 添加解析 ip改成github的ip，ip从cmd中ping一下就得到了 登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入你的域名tanruidd.top 然后在你的博客文件source中创建一个名为CNAME文件，不要后缀，内容为你的域名。 最后在在git中输入 123hexo cleanhexo ghexo d 等待一段时间就可以在自己的域名看见博客了。 然后就是对博客的配置了，比如修改主题，可以根据需求自行修改。 可以查找hexo命令。","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-05-26T04:48:53.199Z","updated":"2019-05-26T04:48:53.199Z","comments":true,"path":"2019/05/26/hello-world/","link":"","permalink":"http://tanruidd.github.io/2019/05/26/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}